{
	"info": {
		"_postman_id": "41d77145-7a2a-47a9-bba0-91c0116ef03f",
		"name": "api-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/user/{{test_user1}} Create User 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6cac5570-7924-413b-89e0-0eb139a03505",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Content-Type is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Status code is 201\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"New user is returned\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"test_user1\"));",
							"    pm.expect(jsonData.email).to.eql(\"ig.gladun@gmail.com\");",
							"    pm.expect(jsonData.birthdate).to.eql(\"12/12/2012\");",
							"    pm.expect(jsonData.address).to.eql(\"1133 Budapest\");",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "0facbc0f-d155-4fe2-b4d2-f84911da2103",
						"type": "text/javascript",
						"exec": [
							"tmp = \"igor\" + Math.floor(Math.random() * 1000)",
							"pm.environment.set(\"test_user1\", tmp);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{test_user1}}\",\n\t\"email\": \"ig.gladun@gmail.com\",\n\t\"birthdate\": \"12/12/2012\",\n\t\"address\": \"1133 Budapest\"\n}"
				},
				"url": {
					"raw": "{{env-url}}/user/{{test_user1}}",
					"host": [
						"{{env-url}}"
					],
					"path": [
						"user",
						"{{test_user1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user/{{test_user1}} Create Duplicate User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f49f939-2b67-4f2c-82ec-5f25ad6a9d67",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Content-Type is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Error message is correct\", function() {",
							"    var jsonData = pm.response.json();",
							"    message = \"A user with name '\" + pm.environment.get(\"test_user1\") + \"' already exists.\"",
							"    pm.expect(jsonData.message).to.eql(message);",
							"});",
							"pm.test(\"Status code is 400\", function() {",
							"    pm.response.to.have.status(400);",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "d18adda9-c596-45ca-b552-689d0acf9736",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"{{test_user1}}\",\n\t\"email\": \"ig.gladun@gmail.com\",\n\t\"birthdate\": \"12/12/2012\",\n\t\"address\": \"1133 Budapest\"\n}"
				},
				"url": {
					"raw": "{{env-url}}/user/{{test_user1}}",
					"host": [
						"{{env-url}}"
					],
					"path": [
						"user",
						"{{test_user1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user/{{test_user2}} Create User 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3a45e5bb-51e3-4aae-9642-1d7856a9e892",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Content-Type is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Status code is 201\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"pm.test(\"New user is returned\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"test_user2\"));",
							"    pm.expect(jsonData.email).to.eql(\"tom@tomtom.com\");",
							"    pm.expect(jsonData.birthdate).to.eql(\"01/11/1912\");",
							"    pm.expect(jsonData.address).to.eql(\"12345 NYC\");",
							"});"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "02c733ab-7dd0-439f-85df-f9086fd752ef",
						"type": "text/javascript",
						"exec": [
							"tmp = \"Tom\" + Math.floor(Math.random() * 1000)",
							"pm.environment.set(\"test_user2\", tmp);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"{{test_user2}}\",\n    \"email\": \"tom@tomtom.com\",\n    \"birthdate\": \"01/11/1912\",\n    \"address\": \"12345 NYC\"\n}"
				},
				"url": {
					"raw": "{{env-url}}/user/{{test_user2}}",
					"host": [
						"{{env-url}}"
					],
					"path": [
						"user",
						"{{test_user2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user/{{test_user1}} Get User ",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4675bf1e-e288-428c-8b9e-a46c8787a3b5",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Content-Type is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Status code is 200\", function() {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"New user is returned\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.name).to.eql(pm.environment.get(\"test_user1\"));",
							"    pm.expect(jsonData.email).to.eql(\"ig.gladun@gmail.com\");",
							"    pm.expect(jsonData.birthdate).to.eql(\"12/12/2012\");",
							"    pm.expect(jsonData.address).to.eql(\"1133 Budapest\");",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "p_flow_id",
							"value": "185",
							"type": "text"
						},
						{
							"key": "p_flow_step_id",
							"value": "130",
							"type": "text"
						},
						{
							"key": "p_widget_num_return",
							"value": "15",
							"type": "text"
						},
						{
							"key": "p_widget_name",
							"value": "worksheet",
							"type": "text"
						},
						{
							"key": "p_widget_mod",
							"value": "ACTION",
							"type": "text"
						},
						{
							"key": "p_widget_action",
							"value": "PAGE",
							"type": "text"
						},
						{
							"key": "p_widget_action_mod",
							"value": "pgR_min_row=1max_rows=15rows_fetched=15",
							"type": "text"
						},
						{
							"key": "x01",
							"value": "555215554758934859",
							"type": "text"
						},
						{
							"key": "x02",
							"value": "555216849652934863",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{env-url}}/user/{{test_user1}}",
					"host": [
						"{{env-url}}"
					],
					"path": [
						"user",
						"{{test_user1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/users Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9734dee8-51ed-4f8f-96b0-47015d8f414a",
						"type": "text/javascript",
						"exec": [
							"var jsonData = pm.response.json();",
							"var list = jsonData['users'].length;",
							"var users = jsonData['users']",
							"",
							"o1 = {",
							"    \"name\": pm.environment.get(\"test_user1\"),",
							"    \"email\": \"ig.gladun@gmail.com\",",
							"    \"birthdate\": \"12/12/2012\",",
							"    \"address\": \"1133 Budapest\"",
							"}",
							"",
							"o2 = {",
							"    \"name\": pm.environment.get(\"test_user2\"),",
							"    \"email\": \"tom@tomtom.com\",",
							"    \"birthdate\": \"01/11/1912\",",
							"    \"address\": \"12345 NYC\"",
							"}",
							"",
							"",
							"",
							"pm.test(\"Valid records are returned\", function() {",
							"    pm.expect(containsObject(o1, users)).to.be.true;",
							"    pm.expect(containsObject(o2, users)).to.be.true;",
							"});",
							"",
							"function containsObject(obj, list) {",
							"    var i;",
							"    for (i = 0; i < list.length; i++) {",
							"        curr = list[i]",
							"        if (curr['name'] === obj['name'] &&",
							"            curr['email'] === obj['email'] &&",
							"            curr['birthdate'] === obj['birthdate'] &&",
							"            curr['address'] === obj['address']",
							"        ) {",
							"            return true;",
							"        }",
							"    }",
							"    return false;",
							"}"
						]
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "ca0b30c4-eb00-4586-9101-f52984e37a96",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "p_flow_id",
							"value": "185",
							"type": "text"
						},
						{
							"key": "p_flow_step_id",
							"value": "130",
							"type": "text"
						},
						{
							"key": "p_widget_num_return",
							"value": "15",
							"type": "text"
						},
						{
							"key": "p_widget_name",
							"value": "worksheet",
							"type": "text"
						},
						{
							"key": "p_widget_mod",
							"value": "ACTION",
							"type": "text"
						},
						{
							"key": "p_widget_action",
							"value": "PAGE",
							"type": "text"
						},
						{
							"key": "p_widget_action_mod",
							"value": "pgR_min_row=1max_rows=15rows_fetched=15",
							"type": "text"
						},
						{
							"key": "x01",
							"value": "555215554758934859",
							"type": "text"
						},
						{
							"key": "x02",
							"value": "555216849652934863",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{env-url}}/users",
					"host": [
						"{{env-url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user/xxxx Get Not Existing User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "45837b67-421e-4b2f-b0ab-fceca5bdc9e0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Content-Type is present\", function() {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"pm.test(\"Error message is correct\", function() {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User not found\");",
							"});",
							"pm.test(\"Status code is 404\", function() {",
							"    pm.response.to.have.status(404);",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "p_flow_id",
							"value": "185",
							"type": "text"
						},
						{
							"key": "p_flow_step_id",
							"value": "130",
							"type": "text"
						},
						{
							"key": "p_widget_num_return",
							"value": "15",
							"type": "text"
						},
						{
							"key": "p_widget_name",
							"value": "worksheet",
							"type": "text"
						},
						{
							"key": "p_widget_mod",
							"value": "ACTION",
							"type": "text"
						},
						{
							"key": "p_widget_action",
							"value": "PAGE",
							"type": "text"
						},
						{
							"key": "p_widget_action_mod",
							"value": "pgR_min_row=1max_rows=15rows_fetched=15",
							"type": "text"
						},
						{
							"key": "x01",
							"value": "555215554758934859",
							"type": "text"
						},
						{
							"key": "x02",
							"value": "555216849652934863",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{env-url}}/user/xxxx",
					"host": [
						"{{env-url}}"
					],
					"path": [
						"user",
						"xxxx"
					]
				}
			},
			"response": []
		}
	]
}